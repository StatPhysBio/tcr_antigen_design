
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from scipy.stats import pearsonr, spearmanr

all_neg_los_ec50_minus_wt = []
all_predictions = []
all_reliable_mask = []

for tcr in range(1, 8):
    df = pd.read_csv(f'mskcc_tcr{tcr}_ec50_sat_mut_af3-luksza_cross_reactivity-use_mt_structure=0.csv')

    # only keep one wildtype value
    is_wt = df['mutant'].apply(lambda x: x[0] == x[-1])

    if tcr in {1, 2, 3}:
        wt_true = df.loc[df['mutant'] == 'N1N']['-log10(EC50)'].values[0]
        wt_pred = df.loc[df['mutant'] == 'N1N']['substitution_matrix_score'].values[0]
        is_wt_to_keep = df['mutant'].apply(lambda x: x[0] == 'N' and x[-1] == 'N')
    elif tcr in {4, 5, 6}:
        wt_true = df.loc[df['mutant'] == 'I1I']['-log10(EC50)'].values[0]
        wt_pred = df.loc[df['mutant'] == 'I1I']['substitution_matrix_score'].values[0]
        is_wt_to_keep = df['mutant'].apply(lambda x: x[0] == 'I' and x[-1] == 'I')
    elif tcr in {7}:
        wt_true = df.loc[df['mutant'] == 'G1G']['-log10(EC50)'].values[0]
        wt_pred = df.loc[df['mutant'] == 'G1G']['substitution_matrix_score'].values[0]
        is_wt_to_keep = df['mutant'].apply(lambda x: x[0] == 'G' and x[-1] == 'G')
    else:
        raise ValueError(f'Unknown TCR {tcr}')

    df = df[(~is_wt) | is_wt_to_keep]

    is_reliable_mask = df['is_reliable']

    reliable_r = spearmanr(df['substitution_matrix_score'][is_reliable_mask], df['-log10(EC50)'][is_reliable_mask])[0]
    all_r = spearmanr(df['substitution_matrix_score'], df['-log10(EC50)'])[0]

    print(f'TCR {tcr} - Spearman r (reliable): {reliable_r:.2f} - Spearman r (all): {all_r:.2f} - num reliable: {is_reliable_mask.sum()}')

    all_neg_los_ec50_minus_wt.append(df['-log10(EC50)'].values - wt_true)
    all_predictions.append(df['substitution_matrix_score'].values - wt_pred)
    all_reliable_mask.append(is_reliable_mask.values)

all_neg_los_ec50_minus_wt = np.concatenate(all_neg_los_ec50_minus_wt)
all_predictions = np.concatenate(all_predictions)
all_reliable_mask = np.concatenate(all_reliable_mask)

reliable_r = spearmanr(all_neg_los_ec50_minus_wt[all_reliable_mask], all_predictions[all_reliable_mask])[0]

all_r = spearmanr(all_neg_los_ec50_minus_wt, all_predictions)[0]

print(f'TCR 1-7 - Spearman r (reliable): {reliable_r:.2f} - Spearman r (all): {all_r:.2f} - num reliable: {all_reliable_mask.sum()}')


# replicate the scatterplot in figure 3f from the Luksza el al. 2022 paper

df = pd.read_csv(f'mskcc_tcr7_ec50_sat_mut_af3-luksza_cross_reactivity-use_mt_structure=0.csv')

mutants = df['mutant'].values
is_reliable_mask = df['is_reliable'].values

true_list = []
pred_list = []

mutant_pairs = [
('G1A','G1C'),
('G1A','G1D'),
('G1A','G1E'),
('G1A','G1F'),
('G1A','G1G'),
('G1A','G1H'),
('G1A','G1I'),
('G1A','G1K'),
('G1A','G1L'),
('G1A','G1M'),
('G1A','G1N'),
('G1A','G1P'),
('G1A','G1Q'),
('G1A','G1R'),
('G1A','G1S'),
('G1A','G1T'),
('G1A','G1V'),
('G1A','G1W'),
('G1A','G1Y'),
('G1C','G1E'),
('G1C','G1F'),
('G1C','G1G'),
('G1C','G1H'),
('G1C','G1I'),
('G1C','G1K'),
('G1C','G1L'),
('G1C','G1M'),
('G1C','G1Q'),
('G1C','G1R'),
('G1C','G1S'),
('G1C','G1V'),
('G1C','G1W'),
('G1C','G1Y'),
('G1D','G1E'),
('G1D','G1F'),
('G1D','G1G'),
('G1D','G1H'),
('G1D','G1I'),
('G1D','G1K'),
('G1D','G1L'),
('G1D','G1M'),
('G1D','G1Q'),
('G1D','G1R'),
('G1D','G1S'),
('G1D','G1V'),
('G1D','G1W'),
('G1D','G1Y'),
('G1E','G1F'),
('G1E','G1G'),
('G1E','G1H'),
('G1E','G1I'),
('G1E','G1K'),
('G1E','G1L'),
('G1E','G1M'),
('G1E','G1N'),
('G1E','G1P'),
('G1E','G1Q'),
('G1E','G1R'),
('G1E','G1S'),
('G1E','G1T'),
('G1E','G1V'),
('G1E','G1W'),
('G1E','G1Y'),
('G1F','G1G'),
('G1F','G1H'),
('G1F','G1I'),
('G1F','G1K'),
('G1F','G1L'),
('G1F','G1M'),
('G1F','G1N'),
('G1F','G1P'),
('G1F','G1Q'),
('G1F','G1R'),
('G1F','G1S'),
('G1F','G1T'),
('G1F','G1V'),
('G1F','G1W'),
('G1F','G1Y'),
('G1G','G1H'),
('G1G','G1I'),
('G1G','G1K'),
('G1G','G1L'),
('G1G','G1M'),
('G1G','G1N'),
('G1G','G1P'),
('G1G','G1Q'),
('G1G','G1R'),
('G1G','G1S'),
('G1G','G1T'),
('G1G','G1V'),
('G1G','G1W'),
('G1G','G1Y'),
('G1H','G1I'),
('G1H','G1K'),
('G1H','G1L'),
('G1H','G1M'),
('G1H','G1N'),
('G1H','G1P'),
('G1H','G1Q'),
('G1H','G1R'),
('G1H','G1S'),
('G1H','G1T'),
('G1H','G1V'),
('G1H','G1W'),
('G1H','G1Y'),
('G1I','G1K'),
('G1I','G1L'),
('G1I','G1M'),
('G1I','G1N'),
('G1I','G1P'),
('G1I','G1Q'),
('G1I','G1R'),
('G1I','G1S'),
('G1I','G1T'),
('G1I','G1V'),
('G1I','G1W'),
('G1I','G1Y'),
('G1K','G1L'),
('G1K','G1M'),
('G1K','G1N'),
('G1K','G1P'),
('G1K','G1Q'),
('G1K','G1R'),
('G1K','G1S'),
('G1K','G1T'),
('G1K','G1V'),
('G1K','G1W'),
('G1K','G1Y'),
('G1L','G1M'),
('G1L','G1N'),
('G1L','G1P'),
('G1L','G1Q'),
('G1L','G1R'),
('G1L','G1S'),
('G1L','G1T'),
('G1L','G1V'),
('G1L','G1W'),
('G1L','G1Y'),
('G1M','G1N'),
('G1M','G1P'),
('G1M','G1Q'),
('G1M','G1R'),
('G1M','G1S'),
('G1M','G1T'),
('G1M','G1V'),
('G1M','G1W'),
('G1M','G1Y'),
('G1N','G1Q'),
('G1N','G1R'),
('G1N','G1S'),
('G1N','G1V'),
('G1N','G1W'),
('G1N','G1Y'),
('G1P','G1Q'),
('G1P','G1R'),
('G1P','G1S'),
('G1P','G1V'),
('G1P','G1W'),
('G1P','G1Y'),
('G1Q','G1R'),
('G1Q','G1S'),
('G1Q','G1T'),
('G1Q','G1V'),
('G1Q','G1W'),
('G1Q','G1Y'),
('G1R','G1S'),
('G1R','G1T'),
('G1R','G1V'),
('G1R','G1W'),
('G1R','G1Y'),
('G1S','G1T'),
('G1S','G1V'),
('G1S','G1W'),
('G1S','G1Y'),
('G1T','G1V'),
('G1T','G1W'),
('G1T','G1Y'),
('G1V','G1W'),
('G1V','G1Y'),
('G1W','G1Y'),
('R2A','R2I'),
('R2A','R2R'),
('R2C','R2I'),
('R2C','R2R'),
('R2D','R2I'),
('R2D','R2R'),
('R2E','R2I'),
('R2E','R2R'),
('R2F','R2I'),
('R2F','R2R'),
('R2G','R2I'),
('R2G','R2R'),
('R2H','R2I'),
('R2H','R2R'),
('R2I','R2K'),
('R2I','R2L'),
('R2I','R2M'),
('R2I','R2N'),
('R2I','R2P'),
('R2I','R2Q'),
('R2I','R2R'),
('R2I','R2S'),
('R2I','R2T'),
('R2I','R2V'),
('R2I','R2W'),
('R2I','R2Y'),
('R2K','R2R'),
('R2L','R2R'),
('R2M','R2R'),
('R2N','R2R'),
('R2P','R2R'),
('R2Q','R2R'),
('R2R','R2S'),
('R2R','R2T'),
('R2R','R2V'),
('R2R','R2W'),
('R2R','R2Y'),
('L3A','L3L'),
('L3C','L3L'),
('L3D','L3L'),
('L3E','L3L'),
('L3F','L3L'),
('L3G','L3L'),
('L3H','L3L'),
('L3I','L3L'),
('L3K','L3L'),
('L3L','L3M'),
('L3L','L3N'),
('L3L','L3P'),
('L3L','L3Q'),
('L3L','L3R'),
('L3L','L3S'),
('L3L','L3T'),
('L3L','L3V'),
('L3L','L3W'),
('L3L','L3Y'),
('K4A','K4K'),
('K4C','K4K'),
('K4D','K4K'),
('K4E','K4K'),
('K4F','K4K'),
('K4G','K4K'),
('K4H','K4K'),
('K4I','K4K'),
('K4K','K4L'),
('K4K','K4M'),
('K4K','K4N'),
('K4K','K4P'),
('K4K','K4Q'),
('K4K','K4R'),
('K4K','K4S'),
('K4K','K4T'),
('K4K','K4V'),
('K4K','K4W'),
('K4K','K4Y'),
('A5A','A5C'),
('A5A','A5D'),
('A5A','A5E'),
('A5A','A5F'),
('A5A','A5G'),
('A5A','A5H'),
('A5A','A5I'),
('A5A','A5K'),
('A5A','A5L'),
('A5A','A5M'),
('A5A','A5N'),
('A5A','A5P'),
('A5A','A5Q'),
('A5A','A5R'),
('A5A','A5S'),
('A5A','A5T'),
('A5A','A5V'),
('A5A','A5W'),
('A5A','A5Y'),
('A5C','A5P'),
('A5D','A5P'),
('A5E','A5P'),
('A5F','A5P'),
('A5G','A5P'),
('A5H','A5P'),
('A5I','A5P'),
('A5K','A5P'),
('A5L','A5P'),
('A5M','A5P'),
('A5N','A5P'),
('A5P','A5Q'),
('A5P','A5R'),
('A5P','A5S'),
('A5P','A5T'),
('A5P','A5V'),
('A5P','A5W'),
('A5P','A5Y'),
('L6A','L6I'),
('L6A','L6L'),
('L6A','L6Q'),
('L6A','L6T'),
('L6A','L6V'),
('L6C','L6I'),
('L6C','L6L'),
('L6C','L6Q'),
('L6C','L6T'),
('L6C','L6V'),
('L6D','L6I'),
('L6D','L6L'),
('L6D','L6Q'),
('L6D','L6T'),
('L6D','L6V'),
('L6E','L6I'),
('L6E','L6L'),
('L6E','L6Q'),
('L6E','L6T'),
('L6E','L6V'),
('L6F','L6I'),
('L6F','L6L'),
('L6F','L6Q'),
('L6F','L6T'),
('L6F','L6V'),
('L6G','L6I'),
('L6G','L6L'),
('L6G','L6Q'),
('L6G','L6T'),
('L6G','L6V'),
('L6H','L6I'),
('L6H','L6L'),
('L6H','L6Q'),
('L6H','L6T'),
('L6H','L6V'),
('L6I','L6K'),
('L6I','L6L'),
('L6I','L6M'),
('L6I','L6N'),
('L6I','L6P'),
('L6I','L6Q'),
('L6I','L6R'),
('L6I','L6S'),
('L6I','L6T'),
('L6I','L6V'),
('L6I','L6W'),
('L6I','L6Y'),
('L6K','L6L'),
('L6K','L6Q'),
('L6K','L6T'),
('L6K','L6V'),
('L6L','L6M'),
('L6L','L6N'),
('L6L','L6P'),
('L6L','L6Q'),
('L6L','L6R'),
('L6L','L6S'),
('L6L','L6T'),
('L6L','L6V'),
('L6L','L6W'),
('L6L','L6Y'),
('L6M','L6Q'),
('L6M','L6T'),
('L6M','L6V'),
('L6N','L6Q'),
('L6N','L6T'),
('L6N','L6V'),
('L6P','L6Q'),
('L6P','L6T'),
('L6P','L6V'),
('L6Q','L6R'),
('L6Q','L6S'),
('L6Q','L6T'),
('L6Q','L6V'),
('L6Q','L6W'),
('L6Q','L6Y'),
('L6R','L6T'),
('L6R','L6V'),
('L6S','L6T'),
('L6S','L6V'),
('L6T','L6V'),
('L6T','L6W'),
('L6T','L6Y'),
('L6V','L6W'),
('L6V','L6Y'),
('C7A','C7C'),
('C7C','C7D'),
('C7C','C7E'),
('C7C','C7F'),
('C7C','C7G'),
('C7C','C7H'),
('C7C','C7I'),
('C7C','C7K'),
('C7C','C7L'),
('C7C','C7M'),
('C7C','C7N'),
('C7C','C7P'),
('C7C','C7Q'),
('C7C','C7R'),
('C7C','C7S'),
('C7C','C7T'),
('C7C','C7V'),
('C7C','C7W'),
('C7C','C7Y'),
('Q8A','Q8H'),
('Q8A','Q8K'),
('Q8A','Q8L'),
('Q8A','Q8M'),
('Q8A','Q8Q'),
('Q8A','Q8R'),
('Q8A','Q8V'),
('Q8A','Q8W'),
('Q8C','Q8H'),
('Q8C','Q8K'),
('Q8C','Q8L'),
('Q8C','Q8M'),
('Q8C','Q8Q'),
('Q8C','Q8R'),
('Q8C','Q8V'),
('Q8C','Q8W'),
('Q8D','Q8H'),
('Q8D','Q8K'),
('Q8D','Q8L'),
('Q8D','Q8M'),
('Q8D','Q8Q'),
('Q8D','Q8R'),
('Q8D','Q8V'),
('Q8D','Q8W'),
('Q8E','Q8H'),
('Q8E','Q8K'),
('Q8E','Q8L'),
('Q8E','Q8M'),
('Q8E','Q8Q'),
('Q8E','Q8R'),
('Q8E','Q8V'),
('Q8E','Q8W'),
('Q8F','Q8H'),
('Q8F','Q8K'),
('Q8F','Q8L'),
('Q8F','Q8M'),
('Q8F','Q8Q'),
('Q8F','Q8R'),
('Q8F','Q8V'),
('Q8F','Q8W'),
('Q8G','Q8H'),
('Q8G','Q8K'),
('Q8G','Q8L'),
('Q8G','Q8M'),
('Q8G','Q8Q'),
('Q8G','Q8R'),
('Q8G','Q8V'),
('Q8G','Q8W'),
('Q8H','Q8I'),
('Q8H','Q8K'),
('Q8H','Q8L'),
('Q8H','Q8M'),
('Q8H','Q8N'),
('Q8H','Q8P'),
('Q8H','Q8Q'),
('Q8H','Q8R'),
('Q8H','Q8S'),
('Q8H','Q8T'),
('Q8H','Q8V'),
('Q8H','Q8W'),
('Q8H','Q8Y'),
('Q8I','Q8K'),
('Q8I','Q8L'),
('Q8I','Q8M'),
('Q8I','Q8Q'),
('Q8I','Q8R'),
('Q8I','Q8V'),
('Q8I','Q8W'),
('Q8K','Q8L'),
('Q8K','Q8M'),
('Q8K','Q8N'),
('Q8K','Q8P'),
('Q8K','Q8Q'),
('Q8K','Q8R'),
('Q8K','Q8S'),
('Q8K','Q8T'),
('Q8K','Q8V'),
('Q8K','Q8W'),
('Q8K','Q8Y'),
('Q8L','Q8M'),
('Q8L','Q8N'),
('Q8L','Q8P'),
('Q8L','Q8Q'),
('Q8L','Q8R'),
('Q8L','Q8S'),
('Q8L','Q8T'),
('Q8L','Q8V'),
('Q8L','Q8W'),
('Q8L','Q8Y'),
('Q8M','Q8N'),
('Q8M','Q8P'),
('Q8M','Q8Q'),
('Q8M','Q8R'),
('Q8M','Q8S'),
('Q8M','Q8T'),
('Q8M','Q8V'),
('Q8M','Q8W'),
('Q8M','Q8Y'),
('Q8N','Q8Q'),
('Q8N','Q8R'),
('Q8N','Q8V'),
('Q8N','Q8W'),
('Q8P','Q8Q'),
('Q8P','Q8R'),
('Q8P','Q8V'),
('Q8P','Q8W'),
('Q8Q','Q8R'),
('Q8Q','Q8S'),
('Q8Q','Q8T'),
('Q8Q','Q8V'),
('Q8Q','Q8W'),
('Q8Q','Q8Y'),
('Q8R','Q8S'),
('Q8R','Q8T'),
('Q8R','Q8V'),
('Q8R','Q8W'),
('Q8R','Q8Y'),
('Q8S','Q8V'),
('Q8S','Q8W'),
('Q8T','Q8V'),
('Q8T','Q8W'),
('Q8V','Q8W'),
('Q8V','Q8Y'),
('Q8W','Q8Y'),
('R9A','R9C'),
('R9A','R9D'),
('R9A','R9E'),
('R9A','R9F'),
('R9A','R9G'),
('R9A','R9H'),
('R9A','R9I'),
('R9A','R9K'),
('R9A','R9L'),
('R9A','R9M'),
('R9A','R9N'),
('R9A','R9P'),
('R9A','R9Q'),
('R9A','R9R'),
('R9A','R9S'),
('R9A','R9T'),
('R9A','R9V'),
('R9A','R9W'),
('R9A','R9Y'),
('R9C','R9F'),
('R9C','R9H'),
('R9C','R9I'),
('R9C','R9K'),
('R9C','R9L'),
('R9C','R9M'),
('R9C','R9R'),
('R9C','R9V'),
('R9C','R9Y'),
('R9D','R9F'),
('R9D','R9H'),
('R9D','R9I'),
('R9D','R9K'),
('R9D','R9L'),
('R9D','R9M'),
('R9D','R9R'),
('R9D','R9V'),
('R9D','R9Y'),
('R9E','R9F'),
('R9E','R9H'),
('R9E','R9I'),
('R9E','R9K'),
('R9E','R9L'),
('R9E','R9M'),
('R9E','R9R'),
('R9E','R9V'),
('R9E','R9Y'),
('R9F','R9G'),
('R9F','R9H'),
('R9F','R9I'),
('R9F','R9K'),
('R9F','R9L'),
('R9F','R9M'),
('R9F','R9N'),
('R9F','R9P'),
('R9F','R9Q'),
('R9F','R9R'),
('R9F','R9S'),
('R9F','R9T'),
('R9F','R9V'),
('R9F','R9W'),
('R9F','R9Y'),
('R9G','R9H'),
('R9G','R9I'),
('R9G','R9K'),
('R9G','R9L'),
('R9G','R9M'),
('R9G','R9R'),
('R9G','R9V'),
('R9G','R9Y'),
('R9H','R9I'),
('R9H','R9K'),
('R9H','R9L'),
('R9H','R9M'),
('R9H','R9N'),
('R9H','R9P'),
('R9H','R9Q'),
('R9H','R9R'),
('R9H','R9S'),
('R9H','R9T'),
('R9H','R9V'),
('R9H','R9W'),
('R9H','R9Y'),
('R9I','R9K'),
('R9I','R9L'),
('R9I','R9M'),
('R9I','R9N'),
('R9I','R9P'),
('R9I','R9Q'),
('R9I','R9R'),
('R9I','R9S'),
('R9I','R9T'),
('R9I','R9V'),
('R9I','R9W'),
('R9I','R9Y'),
('R9K','R9L'),
('R9K','R9M'),
('R9K','R9N'),
('R9K','R9P'),
('R9K','R9Q'),
('R9K','R9R'),
('R9K','R9S'),
('R9K','R9T'),
('R9K','R9V'),
('R9K','R9W'),
('R9K','R9Y'),
('R9L','R9M'),
('R9L','R9N'),
('R9L','R9P'),
('R9L','R9Q'),
('R9L','R9R'),
('R9L','R9S'),
('R9L','R9T'),
('R9L','R9V'),
('R9L','R9W'),
('R9L','R9Y'),
('R9M','R9N'),
('R9M','R9P'),
('R9M','R9Q'),
('R9M','R9R'),
('R9M','R9S'),
('R9M','R9T'),
('R9M','R9V'),
('R9M','R9W'),
('R9M','R9Y'),
('R9N','R9R'),
('R9N','R9V'),
('R9N','R9Y'),
('R9P','R9R'),
('R9P','R9V'),
('R9P','R9Y'),
('R9Q','R9R'),
('R9Q','R9V'),
('R9Q','R9Y'),
('R9R','R9S'),
('R9R','R9T'),
('R9R','R9V'),
('R9R','R9W'),
('R9R','R9Y'),
('R9S','R9V'),
('R9S','R9Y'),
('R9T','R9V'),
('R9T','R9Y'),
('R9V','R9W'),
('R9V','R9Y'),
('R9W','R9Y'),]

# mutant_pairs = set()

# for m1, is_rel1 in zip(mutants, is_reliable_mask):

#     if m1[0] == m1[-1]:
#         continue
#     # if not is_rel1:
#     #     continue

#     for m2, is_rel2 in zip(mutants, is_reliable_mask):
#         if m1 == m2:
#             continue
#         if m1[1] != m2[1]:
#             continue
#         if m2[0] == m2[-1]:
#             continue
#         # if not is_rel2:
#         #     continue
#         if (m1, m2) in mutant_pairs or (m2, m1) in mutant_pairs:
#             continue

#         true = np.abs(df.loc[df['mutant'] == m2]['-log10(EC50)'].values[0] - df.loc[df['mutant'] == m1]['-log10(EC50)'].values[0])
#         pred = np.abs(df.loc[df['mutant'] == m2]['substitution_matrix_score'].values[0] - df.loc[df['mutant'] == m1]['substitution_matrix_score'].values[0])

#         true_list.append(true)
#         pred_list.append(pred)

#         mutant_pairs.add((m1, m2))

# d_i = [0.4265316417189761, 0.7769577054740209, 1.1858350996115459, 1.2011211326454208, 1.6962418186727721, 1.4795549981576157, 1.38899685274111, 0.7822985074612253, 0.9749012286522828]

for m1, m2 in mutant_pairs:
    true = np.abs(df.loc[df['mutant'] == m2]['-log10(EC50)'].values[0] - df.loc[df['mutant'] == m1]['-log10(EC50)'].values[0])
    pred = np.abs(df.loc[df['mutant'] == m2]['substitution_matrix_score'].values[0] - df.loc[df['mutant'] == m1]['substitution_matrix_score'].values[0])

    # pos = int(m1[1])
    # assert pos == int(m2[1])
    # pred = pred * d_i[pos-1]

    true_list.append(true)
    pred_list.append(pred)

true_list = np.array(true_list)
pred_list = np.array(pred_list)

r = pearsonr(true_list, pred_list)[0]
n = len(true_list)

plt.scatter(true_list, pred_list)
plt.xlabel('True difference in -log10(EC50)')
plt.ylabel('Predicted difference in substitution matrix score')
plt.title(f'Pearson r = {r:.2f} (n = {n})')
plt.savefig('replica_of_figure_3f.png')
plt.close()




